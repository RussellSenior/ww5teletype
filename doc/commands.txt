Bus Protocol:

The protocol uses a 9-bit serial protocol at 187050 baud with transmit
and receive appearing on the same wire. The transmitting device pulls
the bus to ground to indicate a zero or allows to pulled high to
indicate a one. Each byte is acknowledged, usually with zeros, but
sometimes with a reply value.

Normal typewriter operation:

A command sequence begins by transmitting 0x121 to put the receiver at
address 0x21 on notice that the command is for it. Other receivers are
allowed to ignore the rest of the message. The reply is uniformily
zero, but the command initiator needs to wait for the reply before
proceeding. The command initiator then sends a command code (0x00
through 0x0e). Each command has a fixed number of argument btyes that
follow, which vary by command.

cmd 0x00 (no args)  : Model number query
    	     	      Reply: 0x06 = Wheelwriter 3
			     0x25 = Wheelwriter 5
		             0x26 = Wheelwriter 6

cmd 0x01 (no args) :  Reset and printwheel identification
    	     	      Reply: 0x10 Courier 15 (1353796)
		     	     0x20 Prestige Elite 12 (1353502)
	 		     0x10 Gothic 15 (1353719)
			     0x40 Courier 10 DP PC (1353909) 

cmd 0x02 (two args) : (same as 0x03 below, except arg2 is ignored)

cmd 0x03 (two args) : Print a character with normal ribbon
    	      	      arg1: printwheel rotation, 0x00 to 0x60
		      arg2: microsteps (1/120 inch) to advance

cmd 0x04 (two args) : Print a character with rubout ribbon
    	      	      (same as 0x03)

cmd 0x05 (one arg)  : Platen motion
    	      	      bit7 = direction: 0=paperdown; 1=paperup
		      bits0-6 = microsteps (1/96th inch)

cmd 0x06 (two args) : Carriage motion
    	      	      arg1,bit7 = direction: 0=carriageleft; 1=carriageright
		      arg1,bits0=6 and arg2 = microsteps (1/120th inch)
		      
cmd 0x07 (no args)  : Spins printwheel (apparently intended to get the operators attention)
    	     	      Returns zero

cmd 0x08 (no args)  : Request pitch of printwheel
    	     	      Reply: 0x08 = proportional spaced
		      	     0x10 = 15cpi
			     0x20 = 12cpi
			     0x21 = no printwheel
			     0x40 = 10cpi

cmd 0x09 (one arg)  : Request feature (bitwise)
    	      	      arg1: 0x00 = normal
			    0x01 (bit 0) = impression control
			    0x02 (bit 1) = half-character shift right before strike
		      	    0x04 (bit 2) = underlining on
			    0x08 (bit 3) = autorepeat on
			    0x10 (bit 4) = ?
			    0x20 (bit 5) = playback
			    0x40 (bit 6) = decimal tab alignment
			    0x80 (bit 7) = ?

cmd 0x0a (one arg)  : Language keyboard selection
		      arg1: 0x00 = us english/australia/new zealand (1)
			    0x01 = latin america, spanish (25)
			    0x02 = austria/west germany (29)
			    0x03 = argentina keyboard (35)
			    0x04 = canada, english (37)
			    0x05 = canada, bilingual (39)
			    0x06 = italy (41)
			    0x07 = netherlands (43)
			    0x08 = spain (70)
			    0x09 = switzerland, french (49)/german (51)
			    0x0a = library (111)
			    0x0b = finland/sweden (53)
			    0x0c = norway (55)
			    0x0d = denmark (59)
			    0x0e = trilingual (113)
			    0x0f = portugal (63)
			    0x10 = uk (67)
			    0x11 = japan, english (69)
			    0x12 = greece, greek (219)
			    0x13 = greece, latin (207)
			    0x14 = iceland (97)
			    0x15 = turkey (79)
			    0x16 = south africa (81)
			    0x17 = czech (83)
			    0x18 = slovak (85)
			    0x19 = romania (217)
			    0x1a = hungary (109)
			    0x1b = poland (213)
			    0x1c = yugoslavia, latin (233)
			    0x1d = hong kong (119)
			    0x1e = japan, katakana (221)
			    0x1f = bulgaria (227)
			    0x20 = yugoslavia, cyrillic (225)
			    0x21 = ussr (231)
			    0x22 = france/belgium (251)
			    0x23 = latin supplemental (99)
			    0x24 = east germany (34)

cmd 0x0b (no args)  : Some kind of status check
		      Reply 0x00
			    0x01 (bit 0) = ?
			    0x02 (bit 1) = ?
		            0x04 (bit 2) = carriage is moving
			    0x08 (bit 3) = ?
			    0x10 (bit 4) = platen is moving
			    0x20 (bit 5) = ?
			    0x40 (bit 6) = optical sensor interrupted
					   printwheel change or
					   left carriage interrupt switch
			    0x80 (bit 7) = ?

cmd 0x0c (one arg)  : ??
    	      	      arg1 = 0x01 (seen after a carriage return)
		             0x04 (super/subscript)
		      	     0x10 (??)
			     0x20 (revert super/subscript)
			     0x40 (after dec-tab playback)
			     0x81 (seen after underlining and dec-tab)
			     0x90 (seen after rubout)

cmd 0x0d (one arg)  : precedes other commands
    	      	      arg1 = 0x04 (backspace)
		      	     0x05 (rubout)
			     0x06 (pre-DecT numeric playback)
		      	     0x07 (carriage return)
			     0x0a (tab)
			     0x0f (store)
			     0x11 (carriage return?)
			     0x12 (tab set)
			     0x40 + cached numeric characters in
				  decimal tabs:
				  0x2e = 1
				  0x2f = 2
				  0x2c = 3
				  0x32 = 4
				  0x31 = 5
				  0x33 = 6
				  0x35 = 7
				  0x34 = 8
				  0x2a = 9
				  0x30 = 0

cmd 0x0e (one arg)  : related to code key
    	      	      arg1 = 0xe7 (code key is pressed)

		      0x80    `       0x00
		      0x81    1       0x01
		      0x82    q       0x02
		      0x84    a       0x04
		      0x86    z       0x06
		      0x89    2       0x09
		      0x8a    w       0x0a
		      0x8c    s       0x0c
		      0x8e    x       0x0e
		      0x91    3       0x11
		      0x92    e       0x12
		      0x94    d       0x14
		      0x96    c       0x16
		      0x98    5       0x18
		      0x99    4       0x19
		      0x9a    r       0x1a
		      0x9b    t       0x1b
		      0x9c    f       0x1c
		      0x9d    g       0x1d
		      0x9e    v       0x1e
		      0x9f    b       0x1f
		      0xa0    6       0x20
		      0xa1    7       0x21
		      0xa2    u       0x22
		      0xa3    y       0x23
		      0xa4    j       0x24
		      0xa5    h       0x25
		      0xa6    m       0x26
		      0xa7    n       0x27
		      0xa9    8       0x29
		      0xaa    i       0x2a
		      0xab    ]       0x2b
		      0xac    k       0x2c
		      0xae    ,       0x2e
		      0xb1    9       0x31
		      0xb2    o       0x32
		      0xb4    l       0x34
		      0xb6    .       0x36
		      0xb8    -       0x38
		      0xb9    0       0x39
		      0xba    p       0x3a
		      0xbb    1/2     0x3b
		      0xbc    ;       0x3c
		      0xbd    '       0x3d
		      0xbf    /       0x3f
		      0xc0    DecT    0x40
		      0xc1    Store   0x41
		      0xc2    LMar    0x42
		      0xc3    Play    0x43
		      0xc4    Del     0x44
		      0xc5    TClr    0x45
		      0xc6    MicroDown       0x46
		      0xc7    Space   0x47
		      0xc8    MarRel  0x48
		      0xc9    ??      0x49
		      0xca    Tab     0x4a
		      0xcb    RMar    0x4b
		      0xcc    TSet    0x4c
		      0xcd    Reloc   0x4d
		      0xce    Lock    0x4e
		      0xcf    Rubout  0x4f
		      0xd0    backspace       0x50
		      0xd1    PaperUp 0x51
		      0xd2    PaperDown       0x52
		      0xd4    MicroUp 0x54
		      0xd6    CRtn    0x56
		      0xd7    LineSpace       0x57
		      0xdf    Shift   0x5f
		      0xdf    Shift   0x5f
		      0xe7    Code    0x67

		      followed by a 0x0b (zero return) when pressed or released



When the PC Printer option board is connected, the command processes
are more complex. It seems to work something like this:

0x140: function board gives bus to option board
0x110: option board gives bus to function board
0x114: message from option board to function board
0x124: message from option board to printer board
0x141: message from function board to option board
0x121: message from function board to printer board

0x1.1: message from function board
0x1.4: message from option board
0x11.: message to function board
0x12.: message to printer board
0x14.: message to option board

When the option board wants to talk on the bus, it pulls BRQ low. When
the bus is available, the function board sends a 0x140 on the bus,
handing the token to the option board. As soon as the 0x140 is
received, BRQ is released. The option board then sends its commands and
when it is finished it sends 0x110, handing back control of the bus to
the function board.

The way characters get from the option board to paper goes something
like this:

 * the option board gets the bus token

 * the option board sends a 0x114 (option-to-function) command 0x03 with
   one argument, a code representing a pseudo keyboard event, press and
   release. See command 0x0e key codes above. The high bit is zero for press
   and 1 for release;

 * the function board sends a 0x141 (function-to-option) command
   sequence, basically telling the option board how to phrase that to
   the printer board;

 * the option board then sends a 0x124 (option-to-printer) command
   sequence that the function board just told it how to say.

 * sprinkled liberally around when the function board gets the bus back
   are 0x141 (function-to-option) commands 0x83 to which the reply is
   always 0x01. I assume this is some kind of status check.

 * there are occasional 0x114 (option-to-function) command 0x05
   sequences sent with one argument. I don't know what those
   indicate. Perhaps a "get ready" and "i'm done now" thing.

Other 0x114 0x03 commands:

 0x114 0x00 0x03 0x00 0x47 0x00 -- press space
 0x114 0x00 0x03 0x00 0x49 0x00 -- unknown
 0x114 0x00 0x03 0x00 0x52 0x00 -- half-line down
 0x114 0x00 0x03 0x00 0x56 0x00 -- press carriage return
 0x114 0x00 0x03 0x00 0x5f 0x00 -- press shift
 0x114 0x00 0x03 0x00 0x67 0x00 -- press code key

0x114 0x05 commands:

Not sure what this represents, but I do notice that bit 3 is
0 at the beginning and 1 at the end.

 0x114 0x00 0x05 0x00 0x01 0x00
 0x114 0x00 0x05 0x00 0x02 0x00
 0x114 0x00 0x05 0x00 0x06 0x00
 0x114 0x00 0x05 0x00 0x0a 0x00
 0x114 0x00 0x05 0x00 0x0e 0x00

0x114 0x0f commands:

 0x114 0x00 0x0f 0x00 0x20 0x00
 0x114 0x00 0x0f 0x00 0x40 0x00

0x141 0x82 commands:

These occur when the option board is online, but the function board
has read a code-key modified keyboard event that it wants to let the
option board know about (e.g. to take the option board offline). The
one arg is the key code (see command 0x0e above for a full list) press
and release.

 0x141 0x00 0x82 0x00 0x18 0x01 -- 5 key pressed (toggle printer on/off)
 0x141 0x00 0x82 0x00 0x20 0x01 -- 6 key pressed (toggle online)
 0x141 0x00 0x82 0x00 0x51 0x01 -- PaperUp key pressed
 0x141 0x00 0x82 0x00 0x67 0x01 -- code key pressed
 0x141 0x00 0x82 0x00 0x98 0x01 -- 5 key released
 0x141 0x00 0x82 0x00 0xa0 0x01 -- 6 key released
 0x141 0x00 0x82 0x00 0xd1 0x01 -- PaperUp key released
 0x141 0x00 0x82 0x00 0xe7 0x01 -- code key released

0x141 0x83 command:

 0x141 0x00 0x83 0x01
