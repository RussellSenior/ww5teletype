Bus Protocol:

The protocol uses a 9-bit serial protocol at 187050 baud with transmit
and receive appearing on the same wire. The transmitting device pulls
the bus to ground to indicate a zero or allows to pulled high to
indicate a one. Each byte is acknowledged, usually with zeros, but
sometimes with a reply value.

Normal typewriter operation:

A command sequence begins by transmitting 0x121 to put the receiver at
address 0x21 on notice that the command is for it. Other receivers are
allowed to ignore the rest of the message. The reply is uniformily
zero, but the command initiator needs to wait for the reply before
proceeding. The command initiator then sends a command code (0x00
through 0x0e). Each command has a fixed number of argument btyes that
follow, which vary by command.

cmd 0x00 (no args)  : Model number query
    	     	      Reply: 0x06 = Wheelwriter 3
			     0x25 = Wheelwriter 5
		             0x26 = Wheelwriter 6

cmd 0x01 (no args) :  Reset and printwheel identification
    	     	      Reply: 0x10 Courier 15 (1353796)
		     	     0x20 Prestige Elite 12 (1353502)
	 		     0x10 Gothic 15 (1353719)
			     0x40 Courier 10 DP PC (1353909) 

cmd 0x02 (two args) : (same as 0x03 below, except arg2 is ignored)

cmd 0x03 (two args) : Print a character with normal ribbon
    	      	      arg1: printwheel rotation, 0x00 to 0x60
		      arg2: microsteps (1/120 inch) to advance

cmd 0x04 (two args) : Print a character with rubout ribbon
    	      	      (same as 0x03)

cmd 0x05 (one arg)  : Platen motion
    	      	      bit7 = direction: 0=paperdown; 1=paperup
		      bits0-6 = microsteps (1/96th inch)

cmd 0x06 (two args) : Carriage motion
    	      	      arg1,bit7 = direction: 0=carriageleft; 1=carriageright
		      arg1,bits0=6 and arg2 = microsteps (1/120th inch)
		      
cmd 0x07 (no args)  : ?? spins printwheel
    	     	      Returns zero

cmd 0x08 (no args)  : Request pitch of printwheel
    	     	      Reply: 0x08 = proportional spaced
		      	     0x10 = 15cpi
			     0x20 = 12cpi
			     0x21 = no printwheel
			     0x40 = 10cpi

cmd 0x09 (one arg)  : Request feature (bitwise)
    	      	      arg1: 0x00 = normal
			    0x01 (bit 0) = impression control
			    0x02 (bit 1) = half-character shift right before strike
		      	    0x04 (bit 2) = underlining on
			    0x08 (bit 3) = autorepeat on
			    0x10 (bit 4) = ?
			    0x20 (bit 5) = playback
			    0x40 (bit 6) = decimal tab alignment
			    0x80 (bit 7) = ?

cmd 0x0a (one arg)  : Language keyboard selection
		      arg1: 0x00 = us english/australia/new zealand (1)
			    0x01 = latin america, spanish (25)
			    0x02 = austria/west germany (29)
			    0x03 = argentina keyboard (35)
			    0x04 = canada, english (37)
			    0x05 = canada, bilingual (39)
			    0x06 = italy (41)
			    0x07 = netherlands (43)
			    0x08 = spain (70)
			    0x09 = switzerland, french (49)/german (51)
			    0x0a = library (111)
			    0x0b = finland/sweden (53)
			    0x0c = norway (55)
			    0x0d = denmark (59)
			    0x0e = trilingual (113)
			    0x0f = portugal (63)
			    0x10 = uk (67)
			    0x11 = japan, english (69)
			    0x12 = greece, greek (219)
			    0x13 = greece, latin (207)
			    0x14 = iceland (97)
			    0x15 = turkey (79)
			    0x16 = south africa (81)
			    0x17 = czech (83)
			    0x18 = slovak (85)
			    0x19 = romania (217)
			    0x1a = hungary (109)
			    0x1b = poland (213)
			    0x1c = yugoslavia, latin (233)
			    0x1d = hong kong (119)
			    0x1e = japan, katakana (221)
			    0x1f = bulgaria (227)
			    0x20 = yugoslavia, cyrillic (225)
			    0x21 = ussr (231)
			    0x22 = france/belgium (251)
			    0x23 = latin supplemental (99)
			    0x24 = east germany (34)

cmd 0x0b (no args)  : Some kind of status check
		      Reply 0x00
			    0x01 (bit 0) = ?
			    0x02 (bit 1) = ?
		            0x04 (bit 2) = after tab or carriage motion
			    0x08 (bit 3) = ?
			    0x10 (bit 4) = after platen motion
			    0x20 (bit 5) = ?
			    0x40 (bit 6) = optical sensor interrupted
					   printwheel change or
					   left carriage interrupt switch
			    0x80 (bit 7) = ?

cmd 0x0c (one arg)  : ??
    	      	      arg1 = 0x01 (seen after a carriage return)
		             0x04 (super/subscript)
		      	     0x10 (??)
			     0x20 (revert super/subscript)
			     0x40 (after dec-tab playback)
			     0x81 (seen after underlining and dec-tab)
			     0x90 (seen after rubout)

cmd 0x0d (one arg)  : precedes other commands
    	      	      arg1 = 0x04 (backspace)
		      	     0x05 (rubout)
			     0x06 (pre-DecT numeric playback)
		      	     0x07 (carriage return)
			     0x0a (tab)
			     0x0f (store)
			     0x11 (carriage return?)
			     0x12 (tab set)
			     0x40 + cached numeric characters in
				  decimal tabs:
				  0x2e = 1
				  0x2f = 2
				  0x2c = 3
				  0x32 = 4
				  0x31 = 5
				  0x33 = 6
				  0x35 = 7
				  0x34 = 8
				  0x2a = 9
				  0x30 = 0

cmd 0x0e (one arg)  : related to code key
    	      	      arg1 = 0xe7 (code key is pressed)

		      followed by a 0x0b (zero return) when pressed or released

When the PC Printer option card is connected, the command processes
are more complex. It seems to work something like this:

0x140: function board gives bus to option board
0x110: option board gives bus to function board
0x114: message from option board to function board
0x124: message from option board to printer board
0x141: message from function board to option board
0x121: message from function board to printer board

0x1.1: message from function board
0x1.4: message from option board
0x11.: message to function board
0x12.: message to printer board
0x14.: message to option board

When the option card wants to talk on the bus, it pulls BRQ low. When
the bus is available, the function card sends a 0x140 on the bus,
handing the token to the option card. As soon as the 0x140 is
received, BRQ is released. The option card then sends its commands and
when it is finished it sends 0x110, handing back control of the bus to
the function card.

The way characters get from the option card to paper goes something
like this:

 * the option card gets the bus token

 * the option card sends a 0x114 (option-to-function) command 0x03 with
   one argument (basically a key code). There are at least two special
   keycodes (0x5f for shift and 0xdf for unshift). The unspecial key
   codes are sent in pairs, first with 0x80 bit clear and then with
   that bit set. This is probably to indicate key press/release.

 * the function card sends a 0x141 (function-to-option) command
   sequence, basically telling the option card how to phrase that to
   the printer card;

 * the option card then sends a 0x124 (option-to-printer) command
   sequence that the function card just told it how to say.

 * sprinkled liberally around when the function card get the bus back
   are 0x141 (function-to-option) commands 0x83 to which the reply is
   always 0x01. I assume this is some kind of status check.

 * there are occasional 0x114 (option-to-function) command 0x05
   sequences sent with one argument. I don't know what those
   indicate. Perhaps a "get ready" and "i'm done now" thing.

Other 0x114 0x03 commands:

 0x114 0x00 0x03 0x00 0x47 0x00 -- press space
 0x114 0x00 0x03 0x00 0x49 0x00 -- unknown
 0x114 0x00 0x03 0x00 0x52 0x00 -- half-line down
 0x114 0x00 0x03 0x00 0x56 0x00 -- press carriage return
 0x114 0x00 0x03 0x00 0x5f 0x00 -- press shift
 0x114 0x00 0x03 0x00 0x67 0x00 -- press code key

0x114 0x05 commands:

 0x114 0x00 0x05 0x00 0x01 0x00
 0x114 0x00 0x05 0x00 0x02 0x00
 0x114 0x00 0x05 0x00 0x06 0x00
 0x114 0x00 0x05 0x00 0x0e 0x00

0x114 0x0f commands:

 0x114 0x00 0x0f 0x00 0x20 0x00
 0x114 0x00 0x0f 0x00 0x40 0x00

0x141 0x82 commands:

These occur in bracketing pairs (note the high bit is set or not). They
are the function board sending a message to the option board and the option
board responding with 0x01.

 0x141 0x00 0x82 0x00 0x18 0x01
 0x141 0x00 0x82 0x00 0x20 0x01
 0x141 0x00 0x82 0x00 0x51 0x01
 0x141 0x00 0x82 0x00 0x67 0x01
 0x141 0x00 0x82 0x00 0x98 0x01
 0x141 0x00 0x82 0x00 0xa0 0x01
 0x141 0x00 0x82 0x00 0xd1 0x01
 0x141 0x00 0x82 0x00 0xe7 0x01

0x141 0x83 command:

 0x141 0x00 0x83 0x01
