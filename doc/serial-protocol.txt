There is a ribbon cable connecting the function board in front to the printer board in back. The pins are labelled (left to right):

 * +12
 * PDI
 * BRQ
 * BUS
 * GND
 * POR
 * +5

+12 carries a 12V supply, and +5 carries a 5V supply. GND is Ground. So much for the obvious. BUS carries serial communication between the boards. POR is Power On Reset, is low for a while at power on while things are initialized. BRQ is probably Bus Request. It is only asserted (LOW) when the PC Printer Option is attached, and only when the 0x140 byte is transmitted. PDI is a complete mystery so far.

The printer board also has a 0.1-inch pin header for connecting an external option card. In my case, I have a PC Printer Option card that came with the typewriter. The pins on this connector are labelled:

 * +5
 * GND
 * BUS
 * BRQ
 * POR
 * +34
 * PDI

Observations:

 * The protocol on the BUS wire is a 9-bit serial, apparently the so-called "mode 2" referred to in the Intel 8051 documentation: http://datasheets.chipdb.org/Intel/MCS51/MANUALS/27238302.PDF
 * The 9-bit bytes with the most-significant bit set indicate that the remaining bits are a processor address intended to listen to the commands that follow, so the many 0x121 are just spamming an announcement that the microprocessor on the bus that thinks of itself as 0x21 should pay attention, and that other microprocessors can sleep (only looking for the most-significant bit to see if they should check the address again). One can reasonably deduce that 0x21 is the address of the motor controller board. All other bytes, where the 9th bit is not set, are commands or arguments.
 * horizontal motion is typically measured in microsteps, 1/120th of an inch;
 * carriage motion is most often commanded relative to the current position, so it is necessary for the programming issuing commands to maintain a notion of where the carriage is located for carriage returns and to prevent venturing off the right end;
 * 0x03 takes two arguments, the first byte being the absolute rotation of the daisy wheel (between 0 and 0x60, inclusive) to strike, and the second byte being the number of microsteps to move the carriage to the right afterwards;
 * 0x04 seems to be similar to 0x03, except that it causes the ribbon positioning motor to rotate the rubout tape into position to be struck instead of the normal ribbon;
 * 0x05 command is a platen positioning command, the most significant bit of the single byte argument is a direction bit (1 for up, 0 for down), the rest indicate the magnitude of motion in 1/96ths of an inch;
 * 0x06 command is a carriage positioning command, taking two byte arguments: the most significant bit of the first byte indicates the direction (1 to move the carriage right, 0 to move the carriage to the left), the remaining bits indicate the number of microsteps (1/120th of an inch) to move horizontally;
 * 0x09 command followed by the single byte argument 0x04 seems to turn on underlining;
 * 0x09 command followed by the single byte argument 0x00 seems to turn off underlining;
 * 0x0B commands seem to not result in any actions, maybe a "rest" or "request status" command (we sometimes see non-zero replies to it);
 * 0x0C commands appear after a rubout operation;
 * 0x0D commands appear in connection with:
  * 0x05 during rubout;
  * 0x04 during backspace;
  * 0x07 during carriage return;
  * 0x0a during tab resolution;
  * 0x12 during tab set;
 * 0x0E commands appear in association with "code" related key presses;

 * A carriage return with a Courier 15 printwheel installed emitted an argument of 0x0c (decimal 12), which equates to 8 lines per inch. I also discovered that after an 0x03 command (i.e. printing/advancing), another addressing byte (0x121) was needed before a 0x05 (or probably any other command) was recognized or acknowledged.

 * With the PC Printer option attached, after putting the wheelwriter into Printer On mode (which is associated with its own bus traffic), sending data from a PC over /dev/usb/lp1 (which is line buffered and isn't printed until a ^M is sent), I see the following sequence:
  * about 16.8us before the first character, BRQ is pulled low, then the 9-bit character 0x140 appears;
  * about 87.5us after the start bit, BRQ is deasserted (goes HI again);
  * generally speaking BRQ going LO seems to be associated with the 0x140 byte generally, sometimes including other bytes.
  * as mentioned above the high bit being set implies an address in the lower 8 bits, in this case 0x40;
  * 0x114 appears (unless otherwise indicated, 0x00 replies are implied);
  * 0x005;
  * 0x006;
  * 0x110;
  * 0x140 (with BRQ LO);
  * 0x114;
  * 0x003;
  * 0x067;
  * 0x110;
  * 0x141;
  * 0x083 (reply 0x001);
  * 0x141;
  * 0x00E (BRQ goes LO in the middle of transmission);
  * 0x0E7;
  * 0x140 (the BRQ goes HI again);
  * 0x114;
  * 0x003;
  * 0x0E7;
  * 0x110;
  * 0x121;
  * 0x00B;
  * 0x141;
  * 0x083 (reply 0x001);
  * 0x140 (with BRQ LO during the byte);
  * 0x114;
  * 0x003;
  * 0x0C9;
  * 0x124;
  * 0x000 (reply: 0x025);
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x121;
  * 0x00B;
  * 0x140 (with BRQ LO during the byte);
  * 0x114;
  * 0x003;
  * 0x05F;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x121;
  * 0x00B;
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x025;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x0A5;
  * 0x110;
  * 0x121;
  * 0x00B;
  * 0x141;
  * 0x003;
  * 0x014 (character H);
  * 0x008 (advance 8 microsteps);
  * 0x140 (with BRQ LO as before);
  * 0x124;
  * 0x003;
  * 0x014 (character H);
  * 0x008 (advance 8 microsteps); 
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x0DF;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x121 (BRQ goes LO afterwards, before 0x000 ack, long delay before ack);
  * 0x00B (reply: 0x007);
  * 0x140 (BRQ goes HI afterwards);
  * 0x114;
  * 0x003;
  * 0x012;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x092;
  * 0x110;
  * 0x121;
  * 0x00B (reply: 0x007);
  * 0x141;
  * 0x003;
  * 0x060 (character 'e'?);
  * 0x008;
  * 0x140 (with BRQ LO);
  * 0x124;
  * 0x003;
  * 0x060 (character 'e');
  * 0x008 (advance 8 microsteps);
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003; 
  * 0x034;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x0B4;
  * 0x110;
  * 0x121;
  * 0x00B (reply: 0x007);
  * 0x141;
  * 0x003;
  * 0x009 (character 'l');
  * 0x008 (advance 8 microsteps);
  * 0x140 (with BRQ LO as before);
  * 0x124;
  * 0x003;
  * 0x009 (character 'l');
  * 0x008 (advance 8 microsteps);
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x034;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x0B4;
  * 0x110;
  * 0x121;
  * 0x00B (reply: 0x007);
  * 0x141;
  * 0x003;
  * 0x009 (character 'l');
  * 0x008 (advance 8 microsteps);
  * 0x140 (with BRQ LO as before);
  * 0x124;
  * 0x003;
  * 0x009 (character 'l');
  * 0x008 (advance 8 microsteps);
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x032;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x0B2;
  * 0x110;
  * 0x121;
  * 0x00B (reply: 0x007);
  * 0x141;
  * 0x003;
  * 0x05F (character 'o');
  * 0x008 (advance 8 microsteps);
  * 0x140 (with BRQ LO as before);
  * 0x124;
  * 0x003;
  * 0x05F character 'o');
  * 0x008 (advance 8 microsteps);
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x02E;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x0AE;
  * 0x110;
  * 0x121;
  * 0x00B (reply: 0x007);
  * 0x141;
  * 0x003;
  * 0x00C (character ',');
  * 0x008 (advance 8 microsteps);
  * 0x140 (with BRQ LO as before);
  * 0x124;
  * 0x003;
  * 0x00C (character ',');
  * 0x008 (advance 8 microsteps);
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x047;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x121;
  * 0x00B (reply: 0x007);
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x0C7;
  * 0x110;
  * 0x141;
  * 0x003;
  * 0x000 (character ' ');
  * 0x008 (advance 8 microsteps);
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x05F;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x121;
  * 0x00B (reply: 0x007);
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x00A;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x08A;
  * 0x110;
  * 0x121;
  * 0x00B (reply: 5);
  * 0x141;
  * 0x003;
  * 0x029 (character 'W');
  * 0x008 (advance 8 microsteps);
  * 0x140 (BRQ LO);
  * 0x124;
  * 0x006;
  * 0x080;
  * 0x008;
  * 0x124;
  * 0x003;
  * 0x029 (character 'W');
  * 0x008 (advance 8 microsteps);
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (BRQ goes HI afterwards);
  * 0x114;
  * 0x003;
  * 0x0DF;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x121 (BRQ goes LO afterwards);
  * 0x00B (reply: 0x007);
  * 0x140 (BRQ goes HI afterwards);
  * 0x114;
  * 0x003;
  * 0x032;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x0B2;
  * 0x110;
  * 0x121;
  * 0x00B (reply: 0x007);
  * 0x141;
  * 0x003;
  * 0x05F (character 'o');
  * 0x008 (advance 8 microsteps);
  * 0x140 (with BRQ LO as before);
  * 0x124;
  * 0x003;
  * 0x05F (character 'o');
  * 0x008 (advance 8 microsteps);
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x01A;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x09A;
  * 0x110;
  * 0x121;
  * 0x00B (reply: 0x007);
  * 0x141;
  * 0x003;
  * 0x003 (character 'r');
  * 0x008 (advance 8 microsteps);
  * 0x140 (with BRQ LO as before);
  * 0x124;
  * 0x003;
  * 0x003 (character 'r');
  * 0x008 (advance 8 microsteps);
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x034;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x0B4;
  * 0x110;
  * 0x121;
  * 0x00B (reply: 0x007);
  * 0x141;
  * 0x003;
  * 0x009 (character 'l');
  * 0x008 (advance 8 microsteps);
  * 0x140 (with BRQ LO as before);
  * 0x124;
  * 0x003;
  * 0x009 (character 'l');
  * 0x008 (advance 8 microsteps);
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x014;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x094;
  * 0x110;
  * 0x121;
  * 0x00B (reply: 0x007);
  * 0x141;
  * 0x003;
  * 0x007 (character 'd');
  * 0x008 (advance 8 microsteps);
  * 0x140 (with BRQ LO, HI and the LO again);
  * 0x124;
  * 0x003;
  * 0x007 (character 'd');
  * 0x008 (advance 8 microsteps);
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (then BRQ goes HI afterwards);
  * 0x110;
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x05F;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x121 (BRQ goes LO afterwards);
  * 0x00B (reply: 0x007);
  * 0x140 (then BRQ goes HI afterwards);
  * 0x114;
  * 0x003;
  * 0x001;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x081;
  * 0x110;
  * 0x121;
  * 0x00B (reply: 0x007);
  * 0x141;
  * 0x003;
  * 0x049 (character '!');
  * 0x008 (advance 8 microsteps);
  * 0x140 (with BRQ LO as before);
  * 0x124;
  * 0x003;
  * 0x049 (character '!');
  * 0x008 (advance 8 microsteps);
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ LO as before);
  * 0x114;
  * 0x003;
  * 0x056;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x121 (BRQ goes LO afterwards);
  * 0x00B (reply: 0x007);
  * 0x140 (BRQ goes HI afterwards);
  * 0x114;
  * 0x003;
  * 0x0D6;
  * 0x110;
  * 0x141;
  * 0x00D;
  * 0x007;
  * 0x141;
  * 0x006;
  * 0x000;
  * 0x068;
  * 0x141;
  * 0x005;
  * 0x08C;
  * 0x140 (with BRQ LO, then HI, then LO again);
  * 0x124;
  * 0x006;
  * 0x000;
  * 0x068;
  * 0x124;
  * 0x005;
  * 0x08C;

  * 0x124;
  * 0x00B (reply: 0x014); [repeats 11 times at about 10.98ms intervals]

  * 0x124;
  * 0x00B (reply: 0x004); [repeats 16 times at about 10.92ms intervals]

  * 0x124;
  * 0x00B;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (BRQ goes HI afterwards);
  * 0x114;
  * 0x003;
  * 0x067;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x141;
  * 0x00E (BRQ goes LO afterwards);
  * 0x0E7;
  * 0x140 (BRQ goes HI aftwerwards);
  * 0x114;
  * 0x003;
  * 0x049;
  * 0x110;
  * 0x121;
  * 0x00B;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x141;
  * 0x00E (BRQ goes LO during);
  * 0x0C9;
  * 0x140 (BRQ goes HI aftwerwards);
  * 0x114;
  * 0x003;
  * 0x0C9;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x121;
  * 0x00B;
  * 0x140 (with BRQ pulled LO);
  * 0x114;
  * 0x003;
  * 0x0E7;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x121;
  * 0x00B;
  * 0x140 (with BRQ pulled LO);
  * 0x114;
  * 0x003;
  * 0x067;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x141;
  * 0x00E (BRQ goes LO afterwards);
  * 0x0E7;
  * 0x140 (BRQ goes HI aftwerwards);
  * 0x114;
  * 0x003;
  * 0x0E7;
  * 0x110;
  * 0x121;
  * 0x00B;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ pulled LO);
  * 0x114;
  * 0x003;
  * 0x0C9;
  * 0x124;
  * 0x000 (reply: 0x025);
  * 0x114;
  * 0x005;
  * 0x00E;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x121;
  * 0x00B;

 * While printing from PC Printer Option, the "Ready" LED on the keyboard, turns off. while Active and Online remain on.

 * With Printer On (Active, Online, Ready LEDs on) to Offline (Active and Ready LEDs on), the following sequence appears on the bus:
  * 0x141;
  * 0x082;
  * 0x067 (reply: 0x001);
  * 0x141;
  * 0x082;
  * 0x020 (reply: 0x001);
  * 0x140 (with BRQ pulled LO);
  * 0x114;
  * 0x005;
  * 0x00A;
  * 0x114;
  * 0x003;
  * 0x067;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x141;
  * 0x00E (BRQ goes LO afterwards);
  * 0x0E7;
  * 0x140 (BRQ goes HI afterwards);
  * 0x114;
  * 0x003;
  * 0x0E7;
  * 0x110;
  * 0x121;
  * 0x00B;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ pulled LO);
  * 0x114;
  * 0x003;
  * 0x0C9;
  * 0x124;
  * 0x007;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x121;
  * 0x00B;
  * 0x141;
  * 0x082;
  * 0x0A0 (reply: 0x001);
  * 0x141;
  * 0x082;
  * 0x0E7 (reply: 0x001);

 * Printer to Online (opposite of previous):
  * 0x141;
  * 0x082;
  * 0x067 (reply: 0x001);
  <delay probably from Code press to Onlne press>
  * 0x141;
  * 0x082;
  * 0x020 (reply: 0x001);
  * 0x140 (with BRQ pulled LO);
  * 0x114;
  * 0x005;
  * 0x00E;
  * 0x114;
  * 0x005;
  * 0x006;
  * 0x114;
  * 0x003;
  * 0x067;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x141;
  * 0x00E (BRQ goes LO during);
  * 0x0E7;
  * 0x140 (BRQ returns HI afterwards);
  * 0x114;
  * 0x003;
  * 0x0E7;
  * 0x110;
  * 0x121;
  * 0x00B;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x140 (with BRQ pulled LO);
  * 0x114;
  * 0x003;
  * 0x0C9;
  * 0x124;
  * 0x007;
  * 0x114;
  * 0x005;
  * 0x00E;
  * 0x110;
  * 0x141;
  * 0x083 (reply: 0x001);
  * 0x121;
  * 0x00B;
  * 0x141;
  * 0x082;
  * 0x0A0 (reply: 0x001);
  * 0x141;
  * 0x082;
  * 0x0E7 (reply: 0x001);

